ðŸ‘‰ Brute Approach

class Solution {
public:
    bool hasCycle(ListNode *head) {
        set<ListNode*>st;
        ListNode* dummy=head;
        while(dummy !=NULL){
            if(st.find(dummy)!=st.end()){
                return true;
            }
            else{
                st.insert(dummy);
            }
            dummy=dummy->next;
        }
        return false;
    }
};


ðŸ‘‰Optimal Approach
  using slow and fast pointer ,If the given Linkedlist cycle then slow and fast pointer are bound to meet each other
  
  bool detectCycle(Node *head)
{
    if(head==NULL or head->next==NULL){
        return false;
    }

    Node* slow=head;
    Node* fast=head;

    while(fast->next and fast->next->next){
        fast=fast->next->next;
        slow=slow->next;
        if(fast==slow)return true;
    }

    return false;
}
